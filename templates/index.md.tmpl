---
layout: ""
page_title: "Bitwarden Provider"
description: |-
  Use the Bitwarden provider to manage your Logins, Secure Notes, and Secrets.
---

# Bitwarden Provider

Use the Bitwarden provider to manage your [Password Manager] Logins and Secure Notes, and [Secrets Manager] Secrets.
You must configure the provider with proper credentials before you can use it.
If you're not trying out the experimental `embedded_client` feature, you also need a [Bitwarden CLI] installed locally.

## Example Usage

{{tffile "examples/quick/provider.tf"}}

## Authentication
Depending on the type of credentials you use, you'll be able to connect either with a Password Manager or Secret Manager.
If you want your workspace to interact with both, have a look at [provider aliases].

### Password Manager
The Password Manager accepts different combinations of credentials to authenticate:
* _[Personal API Key]_ (requires `email`, `master_password`, `client_id` and `client_secret` to be set).
* _Email and Password_ (requires `email` and `master_password` to be set) (prefer _Personal API keys_ instead).
* User-provided _Session Key_ (requires `session_key` to be set), which only works with a pre-downloaded Vault (See _Generating a Session Key_).

#### Generating a Client ID and Secret
The recommended way to interact with your Password Manager Vault using the Bitwarden Provider Terraform plugin is to generate an API key.
This allows you to easily revoke access to your Vault without having to change your master password.

In order to generate a pair of Client ID and Secret, you need to:
1. Connect to your Vault on https://vault.bitwarden.com, or your self-hosted instance
2. Click on _Settings_ and then _My Account_
3. Scroll down to the _API Key_ section
4. Click on _View API Key_ (or maybe another label if it's the first time)
5. Save the API credentials somewhere safe

#### Generating a Session Key

If you don't want to use an API key, you can use a Session Key instead.
When doing so, it's your responsibility to:
* ensure the validity of the Session Key
* keep the Session Key safe
* revoke it when you don't need it anymore

You can generate a Session Key by running the following command in your Terraform Workspace:
```console
BITWARDENCLI_APPDATA_DIR=.bitwarden bw login

# or if you use a custom vault path
BITWARDENCLI_APPDATA_DIR=<vault_path> bw login
```

A Session Key is bound to a local copy of a Vault. It's therefore important that you set the right `BITWARDENCLI_APPDATA_DIR` to the path where your Vault is stored.

### Secrets Manager
The Secrets Manager only accepts [Access Tokens] (requires `access_token` to be set).

In order to generate an Access Token you need to:
1. Connect to your Vault on https://vault.bitwarden.com
2. Ensure the _Secrets Manager_ section is selected (bottom left)
3. Click on _Machine accounts_
4. Click on _New_
5. Click on your generated Machine Account
6. Select the _Access Tokens_ tab
7. Created a new Access Token and save it somewhere safe


## Configuration
Configuration for the Bitwarden Provider can be derived from two sources:
* Parameters in the provider configuration
* Environment variables

### Parameters
Credentials can be provided by adding a combination of `email`, `master_password`, `client_id`, `client_secret`, `access_token` or `session_key` to the bitwarden provider block.
```terraform
provider "bitwarden" {
  email           = "terraform@example.com"
  master_password = "my-master-password"
  client_id       = "my-client-id"
  client_secret   = "my-client-secret"

  # If you have the opportunity, you can try out the embedded client which removes the need
  # for a locally installed Bitwarden CLI. Please note that this feature is still considered
  # as experimental, might not work as expected, and is not recommended for production use.
  #
  # experimental {
  #   embedded_client = true
  # }
}
```

### Environment variables
Credentials can be provided by using a combination of `BW_EMAIL`, `BW_PASSWORD`, `BW_CLIENTID`, `BW_CLIENTSECRET`, `BWS_ACCESS_TOKEN` or `BW_SESSION` environment variables.

For example:
```bitwarden
provider "bitwarden" {}
```

```console
export BW_EMAIL="terraform@example.com"
export BW_PASSWORD="my-master-password"
export BW_CLIENTID="my-client-id"
export BW_CLIENTSECRET="my-client-secret"
```

{{ .SchemaMarkdown | trimspace }}

[Password Manager]: https://bitwarden.com/products/personal/
[Secrets Manager]: https://bitwarden.com/products/secrets-manager/
[Bitwarden CLI]: https://bitwarden.com/help/article/cli/#download-and-install
[Access Tokens]: https://bitwarden.com/help/access-tokens/
[Personal API Key]: https://bitwarden.com/help/personal-api-key/
[provider aliases]: https://developer.hashicorp.com/terraform/language/providers/configuration#alias-multiple-provider-configurations
